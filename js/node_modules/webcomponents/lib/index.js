var CustomElements = require('./customelements');
var Parser = require('./parser');
var Component = require('./component');
var fs = require('fs');
var glob = require('glob');
var EventEmitter = require('events').EventEmitter;
var inherits = require('util').inherits;
var Engine = require('./engine');
var Promise = require('es6-promise').Promise;
var vm = require('vm');
var _ = require('lodash');

require('./resource');

const COMPONENT_TAG_NAME = 'web-component';
const NAME = 'name';
const EXTENDS = 'extends';
const OUTER = 'outer';
const ADAPTER = 'adapter';
const ATTRIBUTES = 'attributes';
const ATTRIBUTES_SEPARATOR = /\s|,/;

function WebComponents() {
    EventEmitter.call(this);
}

inherits(WebComponents, EventEmitter);

WebComponents.prototype.load = function (expr) {
    // use sync
    var files = glob.sync(expr);
    files.forEach(function (file) {

        var html = fs.readFileSync(file);
        var $ = Parser.load(html, {decodeEntities: false});

        $(COMPONENT_TAG_NAME).each(function () {

            var $component = $(this);
            var name = $component.attr(NAME);
            var extend = $component.attr(EXTENDS);
            var attributes = $component.attr(ATTRIBUTES);
            var adapter = $component.attr(ADAPTER);
            var outer = $component.attr(OUTER);

            var publish = {};
            if (attributes) {
                // names='a b c' or names='a,b,c'
                var names = attributes.split(ATTRIBUTES_SEPARATOR);
                // record each name for publishing
                for (var i = 0, l = names.length, n; i < l; i++) {
                    // remove excess ws
                    n = names[i].trim();
                    // looks weird, but causes n to exist on `publish` if it does not;
                    // a more careful test would need expensive `in` operator
                    if (n && publish[n] === undefined) {
                        publish[n] = undefined;
                    }
                }
            }

            if (!name) {
                console.error('Component define in', file, 'missing required name attribute')
            } else {

                var $script = $component.find('script');
                var type = $script.attr('type') || 'javascript';
                var definition = {};
                if ($script.length) {
                    var script = vm.createScript($script.html(), file);
                    script.runInNewContext({
                        Component: function (def) {
                            definition = def || {};
                        }
                    });
                }

                definition = _.merge({
                    path: file,
                    extends: extend,
                    attributes: publish,
                    adapter: adapter,
                    outer: outer !== undefined,
                    $component: $component,
                    $: $
                }, definition);

                CustomElements.register(name, definition);
            }
        });

    });
};

WebComponents.prototype.render = function (file, globalData) {
    // TODO: pre render in production env
    var html = fs.readFileSync(file);
    var $ = Parser.load(html);

    var customElementPromises = [];

    CustomElements.getRegistered().forEach(function (customElement) {

        function renderElement(index, elem) {
            var $customElement = $(this);

            var component = new Component(customElement);

            CustomElements.getPublishedAttributes(customElement).forEach(function (attribute) {
                var value = $customElement.attr(attribute);
                if (value) component.setAttribute(attribute, value);
            });

            var renderPromise = component.render($customElement, globalData);
            customElementPromises.push(renderPromise);
        }

        $(customElement).each(renderElement);
        $('[is=' + customElement + ']').each(renderElement);
    });

    return Promise.all(customElementPromises).then(function () {
        return $.html();
    });

};

WebComponents.prototype.register = CustomElements.register;

WebComponents.prototype.engine = Engine.register;

module.exports = new WebComponents;
