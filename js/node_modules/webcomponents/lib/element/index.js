function Element(name){
    this.name = name;
    this.attributes = {};

    // invoke createdCallback
    if (this.createdCallback) {
        this.createdCallback();
    }
}

Element.prototype = {
    setAttribute: function(name, value){
        var oldValue = this.getAttribute(name);
        this.attributes[name] = value;
        this._changeAttribute(name, oldValue, value);
    },
    removeAttribute: function(name) {
        if(this.hasAttribute(name)){
            var oldValue = this.getAttribute(name);
            this.attributes[name] = null;
            delete this.attributes[name];
            this._changeAttribute(name, oldValue, null);
        }
    },
    hasAttribute: function(name) {
        return this.attributes[name] != null
    },
    getAttribute: function(name) {
        return this.attributes[name]
    },
    // https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/
    // index.html#dfn-attribute-changed-callback
    _changeAttribute: function (attrName, oldValue, newValue) {
        if (this.attributeChangedCallback
            && (newValue !== oldValue)) {
            this.attributeChangedCallback(attrName, oldValue, newValue);

        }
    }
    // Called when a custom element is created
    // createdCallback: function(){},

    // Called when an attribute on a custom element changes
    // attributeChangedCallback: function(attrName, oldValue, newValue){}
}

module.exports = Element;
