var CustomElements = require('../customelements');
var Element = require('../element');
var Style = require('../style');
var Engine = require('../engine');
var _ = require('lodash');
var Promise = require('es6-promise').Promise;
var inherits = require('util').inherits;

const RESOURCE_TYPE = 'web-resource';
const SHIM_TAG_NAME = 'div';

function Component(name) {
    Element.call(this, name);

    var definition = CustomElements.getRegisteredDefinition(name);

    this.path = definition.path;
    this.adapter = definition.adapter;
    this.attributes = definition.attributes;
    this.outer = definition.outer;
    this.$ = definition.$;
    this.$component = definition.$component;
}

inherits(Component, Element);

Component.prototype.fetchResources = function ($component) {
    var self = this;
    var $ = this.$;
    var requestPromises = [];

    CustomElements.getRegistered(RESOURCE_TYPE).forEach(function (customElement) {
        var $resources = $component.find(customElement);

        $resources.each(function () {

            var $resource = $(this);
            var tagName = this.name;
            var resourceElement = CustomElements.create(tagName);

            CustomElements.getPublishedAttributes(tagName).forEach(function (attribute) {
                var value = $resource.attr(attribute);
                if (value) resourceElement.setAttribute(attribute, value);
            });
            // Before request handler
            resourceElement.beforeRequest && resourceElement.beforeRequest(self.attributes);

            var promise = new Promise(function (resolve, reject) {
                resourceElement.request(resolve, reject);
            });

            requestPromises.push(promise);
        });

        // remove it
        $resources.remove();
    });

    return Promise.all(requestPromises)
};

Component.prototype.render = function ($customElement, globalData) {
    var self = this;
    self.$customElement = $customElement;
    var $component = self.$component;

    // process template
    var promise = self.fetchResources($component)
        .then(function (componentData) {
            // componentData is array
            var rendered = '';
            var template = self.fetchTemplate($component);
            if (template) {
                rendered = self.renderTemplate(template, componentData, globalData, self.path);
            }
            return rendered;

        })
        .then(function (rendered) {
            // process style
            var style = self.fetchStyle($component);
            var styleHtml = self.renderStyle(style);
            return styleHtml + rendered;
        })
        .then(function (rendered) {
            self.renderElement(rendered);

            // Must render current component first that may pass dynamic params to sub component attributes.
            // TODO: how to optimize in production env when sub component is rendered by dynamic dependent
            self.renderTree($customElement, globalData);
        });

    return promise;
};

Component.prototype.renderElement = function (rendered) {
    var self = this;
    var $customElement = self.$customElement;

    if (self.outer) {
        $customElement.replaceWith(rendered);
    } else {
        // Convert custom tag to shim tag with component class
        if($customElement[0].name == self.name){
            $customElement[0].name = SHIM_TAG_NAME;
            $customElement.addClass(self.name);
        }

        $customElement.html(rendered);
    }
};

Component.prototype.renderTree = function ($fragment, globalData) {
    var self = this;
    var $ = self.$;

    var customElementPromises = [];

    CustomElements.getRegistered().forEach(function (customElement) {

        function renderElement(index, elem) {
            var $customElement = $(this);
            var component = new Component(customElement);

            CustomElements.getPublishedAttributes(customElement).forEach(function (attribute) {
                var value = $customElement.attr(attribute);
                if (value) component.setAttribute(attribute, value);
            });

            var renderPromise = component.render($customElement, globalData);
            // render all multi-level nested component
            var renderTreePromise = self.renderTree($customElement, globalData);

            customElementPromises.push(renderPromise, renderTreePromise);
        }

        $fragment.find(customElement).each(renderElement);
        $fragment.find('[is=' + customElement + ']').each(renderElement);
    });

    return Promise.all(customElementPromises);
};

Component.prototype.fetchStyle = function ($component) {
    var $style = $component.find('style');
    var type = $style.attr('type') || 'style';
    if ($style.length) {
        return {
            content: Style.shimShadowStyles($style.html(), this.name),
            type: type
        };
    }
    // TODO: support external link
    // var $link = $component.find('link[ref=stylesheet]');
};

// TODO: output all in one style file
Component.prototype.renderStyle = function (style) {
    if (!style) {
        return '';
    }

    var self = this;
    var content = style.content;
    var type = style.type;

    return ['<style>', content, '</style>'].join('');
};

Component.prototype.fetchContent = function ($template) {

    var self = this;
    var $ = self.$;
    var $customElement = self.$customElement;
    // render composed DOM
    $template.find('content').each(function () {
        var $content = $(this);
        var select = $content.attr('select');

        var $matched;
        if (select) {
            $matched = $customElement.find(select);
        } else {
            $matched = $customElement.children()
        }
        $content.replaceWith($matched);
    });
};

Component.prototype.fetchTemplate = function ($component) {
    var $template = $component.find('template');

    if ($template.length) {

        var type = $template.attr('type') || 'template';
        this.fetchContent($template);
        return {
            content: $template.html(),
            type: type
        };
    }

};

Component.prototype.renderTemplate = function (template, componentData, globalData, relativePath) {
    var self = this;
    var content = template.content;
    var type = template.type;
    var engine = Engine.get(type);

    var combinedData = componentData;

    if (_.isArray(componentData)) {
        // TODO: the performance of 'call' is better then 'apply'
        combinedData = _.extend.apply(null, _.clone(componentData));
    }

    var data = _.extend({}, globalData, self.attributes, combinedData);
    if (_.isFunction(self.adapter)) {
        var fn = self.adapter;
        var context = {
            request: globalData.request,
            req: globalData.request,
            response: globalData.response,
            res: globalData.response,
            global: globalData,
            attributes: self.attributes,
            // resource data
            data: componentData
        };
        // TODO: clone data if pass data may be rewrite, but it performance mate
        data = fn.call(context, data);
    }

    if (engine.compile && engine.render) {
        var compiled = engine.compile(content, relativePath);
        return engine.render(compiled, data);
    } else if (_.isFunction(engine)) {
        return engine(content, data, relativePath);
    } else {
        console.error('Engine', type, 'unregistered');
    }

};

module.exports = Component;
