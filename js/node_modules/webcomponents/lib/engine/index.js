var _ = require('lodash');
var Handlebars = require('handlebars');

var Engine = {};

Engine.engines = {};

/**
 *
 * @param type
 * @param fn(template, data, relativePath)
 *
 *   relativePath - path with which to resolve relative rules
 */
Engine.register = function(type, fn){

    if (_.isString(type)) {
        Engine.engines[type] = fn;
    }else if(_.isPlainObject(type)){
        _.extend(Engine.engines, type);
    }else{
        throw new Error('Engine.register: first argument must be string or object. Argument provided was \'' + String(type) + '\'.');
    }

};

Engine.get = function(type){
    return Engine.engines[type];
};

Engine.register('template', {
    compile: function(source, relativePath){
        return Handlebars.compile(source);
    },
    render: function(compiled, context){
        return compiled(context);
    }
});

module.exports = Engine;
